1.MAX OCCURING NUMBER IN A LIST

arr=[1,2,1,1,2,3]
d={}
for i in arr:
    d[i]=d.get(i,0)+1
m=max(d.values())
r=[i for i,j in d.items() if j==m]
print(*r)

2.PRINT COUNT IF ELEMENTS LEFT COUNT > RIGHT COUNT
li=[1,3,4,5,6,8,9,6,4]
c=0
for i in range(len(li)):
    l=i
    r=len(li)-i-1
    if l>r:
        c+=1
printÂ©

3.PRINT COUNT,NUMBER FOR WHICH LEFT ELEMENT > RIGHT ELEMENT

arr=[1,2,4,6,9,3]
c=0
for i in range(1,len(arr)-1):
    l=i-1
    r=i+1
    if arr[l]>arr[r]:
        c+=1
        print(arr[i])
        print(f"{arr[i]}-{arr[l]},{arr[r]}")
print(c)


4.PRINT COUNT,NUMBER FOR WHICH LEFT ELEMENT + RIGHT ELEMENT = THAT NUMBER

arr=[1,2,6,4,7,3]
c=0
for i in range(1,len(arr)-1):
    l=i-1
    r=i+1
    if arr[l]+arr[r]==arr[i]:
          c+=1
          print(arr[i])
          print(f"{arr[i]}-{arr[l]}+{arr[r]}")
print(c)

o/p:
6
6-2+4
7
7-4+3
count:2

5.PRINT FIRST HALF IN ASCENDING AND SECOND HALF IN DESCENDING:
arr=[6,4,2,9,1,5,2,5]
m=len(arr)//2
res=[]
res.extend(sorted(arr[:m]))..................................sorted()...cant use sort()return nonetype error
res.extend(sorted(arr[m:],reverse=True))
print(res)

o/p:[2,4,6,9,5,5,2,1]

or

def counting_sort_all(arr):.....................for small range numbers only..try .sort() if wont work try this
    if not arr:
        return []

    min_val = min(arr)
    max_val = max(arr)
    range_size = max_val - min_val + 1

    count = [0] * range_size

    for num in arr:
        count[num - min_val] += 1
    res = []
    for i in range(range_size):
        res.extend([i + min_val] * count[i])

    return res
    
arr=[6,4,2,9,1,5,2,5]
m=len(arr)//2
res=[]
res.extend(counting_sort_all(arr[:m]))
res.extend(counting_sort_all(arr[m:])[::-1]).....descending order
print(res)

6.AFTER SORTING ...PRINT FIRST HALF IN ASCENDING AND SECOND HALF IN DESCENDING
arr=[6,4,2,9,1,5,2,5]
arr.sort()
m=len(arr)//2
res=[]
res.extend(arr[:m])
res.extend(arr[m:][::-1])
print(res)

O/P:[1,2,2,4,9,6,5,5]

7.ZOHO QN:WE HAVE TO PLACE EVEN NUMERS IN EVEN NUMBER INDICES..IN ASCENDING...AND ODD MEANS DECENDING...PLACE IT IF ODD NUMBER IS ENCOUNTERED
arr=[6,4,2,9,1,5,2,5]
e = sorted([i for i in arr if i % 2 == 0])          # ascending
o = sorted([i for i in arr if i % 2 != 0], reverse=True)  # descending
j, k = 0, 0
for i in range(len(arr)):
    if i % 2 == 0:   # even index
        arr[i] = e[j]
        j += 1
    else:            # odd index
        arr[i] = o[k]
        k += 1

print(arr)


O/P:[2, 9, 2, 5, 4, 5, 6, 1]
....in i/p arr 6 is even so the first sorted even element is 2...that is placed...likewise

8.in question N=10, n1,n2=1,5, val=5.....n1,n2 are 1 based index means 1 is 1st element i.e 0th index element..5 means 4th index
[1,2,3,4,5,6,7,8,9,10]...in first swap [5,4,3,2,1,6,7,8,9,10]...in second swap [5,4,3,2,1,10,9,8,7,6].......mid=5 i.e element 6
N=int(input())
n1,n2 = map(int,input().split())
val=int(input())
l=[i for i in range(1,N+1)]
res=[]
res.extend(l[n1-1:n2][::-1])
res.extend(l[n2:][::-1])
print(res)

or

def swap(l,s,e):............................use this instead of indexing reverse ::-1
    while s<e:
        l[s],l[e]=l[e],l[s]
        s+=1
        e-=1
N=int(input())
n1,n2 = map(int,input().split())
val=int(input())
l=[i for i in range(1,N+1)]
m=len(l)//2
swap(l,n1-1,m-1)
swap(l,n2,len(l)-1)
print(l[val-1])

9.SQUARES OF SORTED ARRAY...O/P IN THE ORDER OF ARRAY.

arr=[-4,-1,0,3,10]........sorted array..so use two pointer approach
res=[0]*len(arr)
l=0
r=len(arr)-1
for i in range(len(arr)-1,-1,-1):
    if abs(arr[l]) > abs(arr[r]):
        res[i]=arr[l]................>insted we assign arr[l]*arr[l]...it gives o/p of sorted squares of array 
        l+=1
    else:
        res[i]=arr[r]
        r-=1
print(res)

10.GAP ADDITION
I/P:arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
gap = 3
o/p:45

arr=[1,2,3,4,5,6,7,8,9]
gap=3
t=0
for i in range(gap):
    s=0
    for j in range(i,len(arr),gap):
        s+=arr[j]
    t+=s
print(t)

11. REPLACE O WITH 5

n=int(input())
s=str(n)
print(s.replace('0','5'))

12.SQUARE NUMBER IN AN ARRAY

import math
n=int(input())
l=list(map(int,input().split()))
r=[]
for i in l:
    s=int(math.sqrt(i))
    if s*s==i:
        r.append(i)
print(*r)

13.SORT AN ARRAY:......>sort() is used for both small and large integers range and optimised...try this if wont work go for counting sort(not suitable for high ranges).
   we cant use two pointer approach for sorting...it is suitable to only sorted array:
def counting_sort_all(arr):
    if not arr:
        return []

    min_val = min(arr)
    max_val = max(arr)
    range_size = max_val - min_val + 1

    count = [0] * range_size

    # Count frequencies
    for num in arr:
        count[num - min_val] += 1

    # Build result
    res = []
    for i in range(range_size):
        res.extend([i + min_val] * count[i])

    return res
arr=[2,1,56,89,23]
print(counting_sort_all(arr))

DESCENDING ORDER:......................>.sort(reverse=True)

def sorting(arr):
    if not arr:
        return []
    ma=max(arr)
    mi=min(arr)
    r=ma-mi+1
    count=[0]*r
    for i in arr:
        count[i-mi]+=1
    res=[]
    for i in range(len(arr)-1,-1,-1):
        res.extend([i+mi]*count[i])
    return res
arr=[6,4,2,9,1,5,2,5]
print(sorting(arr))

14.MISSING ELEMENT IN AN ARRAY....0 to n
a=[5,4,0,1,2]
n=len(a)
s1=n*(n+1)//2
s2=sum(a)
print(s1-s2)

Missing element from 1 to N means ....use formula:s1=(n+1)*(n+2)//2

15.MOVE ZEROS TO END:
a=[5,0,0,4,0,1,2]
j=0
for i in a:
    if i!=0:
        a[j]=i
        j+=1
while j<len(a):
    a[j]=0
    j+=1
print(a)

16.MOVE # TO FRONT
s="s#d#hjk#"
l=list(s)
j=len(l)-1
for i in range(len(l)-1,-1,-1):
    if l[i]!='#':
        l[j]=l[i]
        j-=1
while j>=0:
    l[j]='#'
    j-=1
print("".join(l))

17.NEXT GREATER ELEMENT:.................linearly only
arr=[4, 5, 2, 10, 8]
r=[-1]*len(arr)
for i in range(len(arr)):
    for j in range(i+1,len(arr)):
        if arr[j]>arr[i]:
            r[i]=arr[j]
            break
print(r)

18.NEXT GREATER ELEMENT ....CIRCULAR CHECK...........leetcode NGE-II
arr=[4, 5, 2, 10, 8]
r=[-1]*len(arr)
for i in range(len(arr)):
    for j in range(1,len(arr)):
        idx=(i+j)%len(arr)
        if arr[idx]>arr[i]:
            r[i]=arr[idx]
            break
print(r)

19.NEXT GREATER ELEMENT TWO LISTS
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
from typing import List

class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        d = {}
        for i in range(len(nums2)):
            for j in range(i+1, len(nums2)):
                if nums2[j] > nums2[i]:
                    d[nums2[i]] = nums2[j]
                    break
            else:  # Only runs if no break occurred
                d[nums2[i]] = -1
        
        res = []
        for i in nums1:
            res.append(d.get(i, -1))
        return res

19.SUM OF DIGITS OF EACH ELEMENT IN A LIST

list1 = list(map(int,input().split()))
lst = []
for i in list1:
    sum=0
    for j in str(i):
        sum+=int(j)
    lst.append(sum)
print(*lst)

or
list1 = list(map(int,input().split()))
lst = []
for i in list1:
    su=sum([int(i)for i in list(str(i))])
    lst.append(su)
print(*lst)

20.MULTIPLY NUMBERS IN A LIST
Method 1:
list1 = list(map(int,input().split()))
mul=1 
for i in list1:
    mul*=i
print(mul)

Method 2:using math.prod()
import math
list1 = list(map(int,input().split()))
res=math.prod(list1)
print(res)

21.SECOND SMALLEST
def secsmall(li,n):
    if n<=1:
        return -1
    s=float('inf')
    ss=float('inf')
    for i in li:
        if i<s:
            ss=s
            s=i
        elif i<ss and i!=s:
            ss=i
    if ss==float('inf'):
        return s
    return ss
        
n=int(input())
li=list(map(int,input().split()))
print(secsmall(li,n))

22.SECOND LARGEST
python:
def seclar(li,n):
    if n<=1:
        return -1
    l=float('-inf')
    sl=float('-inf')
    for i in li:
        if i>l:
            sl=l
            l=i
        elif i>sl and i!=l:
            sl=i
    if sl==float('-inf'):
        return l
    return sl
n=int(input())
li=list(map(int,input().split()))
print(seclar(li,n))

23.INTERSECTION AND UNION OF TWO LIST
list1 = list(map(int,input().split()))
list2 = list(map(int,input().split()))
res = list(set(list1)&set(list2))
res1 = list(set(list1)|set(list2))
print(res)
print(res1)

24.CUMULATIVE SUM

l=[1,2,3,4,7,6]
res=[]
res.append(l[0])
for i in range(len(l)-1):
    s=l[i]+l[i+1]
    res.append(s)
print(res)

or

import itertools 
l=[1,2,3,4,7,6]
r=itertools.accumulate(l)
print(list(r))

25.ELEMENT FREQUENCY

from collections import Counter
l = list(map(int,input().split()))
li=Counter(l)
for i in li:
    print(i,li[i])

26.SORT BASED ON SECOND LIST

a = ['a', 'b', 'c', 'd']
b = [3, 1, 4, 2]
res = [j for i,j in sorted(zip(b,a))]
print(res)

27.Break a List into Chunks of Size N in Python

l=list(map(int,input().split()))
n=int(input())
r=[]
for i in range(0,len(l),n):
    r.append(l[i:i+n])
print(r)
OR
a = [1, 2, 3, 4, 5, 6, 7, 8]
n=2
res=[a[i:i+n]for i in range(0,len(a),n)]
print(res)


LISTS OF STRINGS
1.Python program to find the character position of Kth word from a list of strings
test_list = ["geekforgeeks", "is", "best", "for", "geeks"]
n=22
r=[]
for i in test_list:
    for j,k in enumerate(i):
        r.append(j)
print(r[n])

2.Reverse each word in a string
test_list = ["geekforgeeks", "is", "best", "for", "geeks"]
r=[]
for i in test_list:
    r.append(i[::-1])
print(r)

3.print count of each word anagrams
i/p:5
dictionary=[listen,silent,enlist,google,gooegl]
queries=[listen,google,gooleg]
o/p:
3
2
2

di = ["listen", "silent", "enlist", "google", "gooegl"]
queries = ["listen", "google", "gooleg"]
d={}
r=[]
for i in di:
  k="".join(sorted(i))
  d[k]=d.get(k,0)+1
for i in queries:
    s="".join(sorted(i))
    r.append(d.get(s,0))
print(r)




