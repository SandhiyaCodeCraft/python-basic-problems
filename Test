1.ADDING ELEMENTS OF ARRAY UNTIL EVERY ELEMENT GREATER THAN EQUAL TO K

def min_operations(arr, k):
    operations = 0
    arr.sort()

    while arr[0] < k:
        if len(arr) < 2:
            return -1  # Not possible

        first = arr.pop(0)   # smallest
        second = arr.pop(0)  # second smallest
        arr.append(first + second)
        arr.sort()
        operations += 1

    return operations
arr = [1, 10, 12, 9, 2, 3]
k = 6
print(min_operations(arr, k))  # Output: 2

2.ROTATE AN ARRAY BY 1
def rev(arr,l,r):
    while l<r:
        arr[l],arr[r]=arr[r],arr[l]
        l+=1
        r-=1
arr=list(map(int,input().split()))
k=1
rev(arr,0,len(arr)-1)
rev(arr,0,k-1)
rev(arr,k,len(arr)-1)
print(arr)

3.Rearrange the array alternatively,first number should be max second min, third second max,fourth sec min etc.....
arr=list(map(int,input().split()))
arr1=sorted(arr,reverse=True)
arr2=sorted(arr)
res=[]
for i in range(len(arr)//2):
    res.append(arr1[i])
    res.append(arr2[i])
print(res)

i/p:[1,2,3,4,5,6]
o/p:[6,1,5,2,4,3]

4.MEDIAN OF TWO SORTED ARRAYS OF SAME SIZE..........median means after sorting (middle two elements)//2

arr1=list(map(int,input().split()))
arr2=list(map(int,input().split()))
i,j=0,0
res=[]
while i<len(arr1) and j<len(arr2):
    if arr1[i]<arr2[j]:
        res.append(arr1[i])
        i+=1
    else:
        res.append(arr2[j])
        j+=1
while i<len(arr1):
    res.append(arr1[i])
    i+=1
while j<len(arr2):
    res.append(arr2[j])
    j+=1
m=len(res)//2
median=(res[m-1]+res[m])/2.............in some testcase they may expect ans in float
print(median)

i/p:arr1=[1,12,15,26,38],arr2=[2,13,17,30,45]
o/p:16
(15+17)/2=16

5.SWAP Kth element from beginning with kth element from end

arr1=list(map(int,input().split()))
k=int(input())
arr1[k-1],arr1[-k]=arr1[-k],arr1[k-1]
print(arr1)

i/p:[5,3,6,1,2]
    k=2
o/p:[5,1,6,3,2]

6.CHECK AN ARRAY IS SUBSET OF ANOTHER ARRAY

arr1=list(map(int,input().split()))
arr2=list(map(int,input().split()))
c=0
for i in arr2:
    if i in arr1:
        c+=1
if c==len(arr2):
    print("True")
else:
    print("False")

[10,5,2,23,19][19,5,3]
o/p:False

7.MOVE ZEROS TO END

l=list(map(int,input().split()))
res=[0]*len(l)
j=0
for i in range(len(l)):
    if l[i]!=0:
        res[j]=l[i]
        j+=1
print(res)

8.LCM AND GCD OF TWO NUMBERS:

a=int(input())
b=int(input())
gcd=1
for i in range(1,min(a,b)+1):
    if a%i==0 and b%i==0:
        gcd=i
lcm=(a*b)//gcd
print(lcm)

9.Given two numbers b and e, the task is to implement a function to compute b^e
A Input: b = 3 e = 5
Output: 243.00000
Input: b = 0.55 e = 3
Output: 0.16638
Input: b = - 0.67 e = - 7
Output: -16.49971

WITHOUT BUILTIN FN:
def power(b,e):
    pow=1
    for i in range(abs(e)):
        pow=pow*b
    if e<0:
        return 1/pow
    else:
        return pow
b=float(input())
e=int(input())
res=power(b,e)
print(f"{res:.5f}")

OR

import math
b=float(input())
e=int(input())
res=math.pow(b,e)
print(f"{res:.5f}")

10.Given a number N, complete the following tasks.
Task 1. Generate a new number from N by changing the zeroes in the binary representation of N to 1.
Task 2. Find the difference between N and the newly generated number.

Example 1:
Input: N = 8
Output: 7 15
Explanation:
There are 3 zeroes in binary representation of 8. Changing them to 1 will give 15.
Difference between these two is 7.

N=int(input())
s=bin(N)[2:].............int to bin.......it gives as binary string...so no need to convert to str
bi=s.replace('0','1')
res=int(bi,2)..................converting binary string to int
print(res-N,res)
