1.SECOND SMALLEST OPTIMISED WITH ALL CONSTRAINTS

import java.util.*;
public class Main {
    static int secondsmallest(int arr[], int n){
        if(n==1 || n==0){
            return -1;.........................>condition 1
        }
        int s = Integer.MAX_VALUE;
        int ss = Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            if(arr[i]<s){
                ss=s;..............always first change s to ss and update i to s
                s = arr[i];
            }
            else if(arr[i]<ss && arr[i]!=s){
                ss=arr[i];
            }
        }
        if(ss==Integer.MAX_VALUE){.......................................>if elements are same [5,5,5] return 5
            return s;
        }
        return ss;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[5];
        for(int i=0;i<5;i++){
            arr[i]=sc.nextInt();
        }
        int n = arr.length;
        System.out.println("secondsmallest:"+secondsmallest(arr,n));
    }
}
PYTHON:
def secsmall(li,n):
    if n<=1:
        return -1
    s=float('inf')
    ss=float('inf')
    for i in li:
        if i<s:
            ss=s
            s=i
        elif i<ss and i!=s:
            ss=i
    if ss==float('inf'):
        return s
    return ss
        
n=int(input())
li=list(map(int,input().split()))
print(secsmall(li,n))

2.SECOND LARGEST
python:
def seclar(li,n):
    if n<=1:
        return -1
    l=float('-inf')
    sl=float('-inf')
    for i in li:
        if i>l:
            sl=l
            l=i
        elif i>sl and i!=l:
            sl=i
    if sl==float('-inf'):
        return l
    return sl
        
n=int(input())
li=list(map(int,input().split()))
print(seclar(li,n))

JAVA:
import java.util.*;
public class Main {
    static int secondlargest(int arr[], int n){
        if(n==1 || n==0){
            return -1;
        }
        int l = Integer.MIN_VALUE;
        int sl = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            if(arr[i]>l){
                sl=l;
                l = arr[i];
            }
            else if(arr[i]>sl && arr[i]!=l){
                sl=arr[i];
            }
        }
        if(sl==Integer.MIN_VALUE){
            return l;
        }
        return sl;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[5];
        for(int i=0;i<5;i++){
            arr[i]=sc.nextInt();
        }
        int n = arr.length;
        System.out.println("secondlargest:"+secondlargest(arr,n));
    }
}
.................................................................................................................................................................................................................

2.Palindrome
def palindrome(s):
    S = s.lower().....................ignorecase
    l=0
    r=len(s)-1
    while l<r:
        if not s[l].isalpha():.................ignore special characters
            l+=1
        elif not s[r].isalpha():
            r-=1
        elif s[l]!=s[r]:
            return False
            break
        else:
            l+=1
            r-=1
    return True
s=input()
print(palindrome(s))

Java:

import java.util.*;
public class Main{
    static boolean palindrome(String s){
        String S = s.toLowerCase();
        int l=0;
        int r=S.length()-1;
        while(l<r){
            if(!Character.isAlphabetic(S.charAt(l))){
                l+=1;
            }
            else if(!Character.isAlphabetic(S.charAt(r))){
                r-=1;
            }
            else if(S.charAt(l)!=S.charAt(r)){
                return false;
            }
            else{
                l+=1;
            r-=1;
            }
        }
        return true;
    }
	public static void main(String[] args) {
	    Scanner sc = new Scanner(System.in);
	    String s = sc.nextLine();
		System.out.println(palindrome(s));
	}
}

3.
1 2 3
4 5 6
7 8 9
O/p 123654789

matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

result = []

for i in range(len(matrix)):
    if i % 2 == 0:
        result.extend(matrix[i])         # Even row: left to right
    else:
        result.extend(matrix[i][::-1])   # Odd row: right to left

print(''.join(str(x) for x in result))  # Output: 123654789

4.FIND MAX GCD

N1=int(input())
N2=int(input())
m=min(N1,N2)
l=[]
for i in range(1,m+1):
   if(N1%i==0 and N2%i==0):
      l.append(i)
print(max(l))

5.remove first and last character...........python string doesn't have any builtin fn to remove charcter..using indexing
s=input()
print(s[1:-1])

6.print odd integers between range
n1=int(input())
n2=int(input())
for i in range(n1+1, n2):
   if i%2!=0:
      print(i,end=" ")

7.print string till character c

s=input()
c=input()
i=s.find(c)
print(s[i])

8.fibonacci sequence
n=input(input())
f=0
s=1
print(f,s,end=" ")
for i in range(2,n):
    t=f+s
    print(t,end=" ")
    f=s
    s=t

9.Example Input/Output 1:
Input:
3
250 200

450 300

200 250

Output:

300.00

250.00

CODE:
n=int(input())
f=[]
s=[]
for i in range(n):
  n1, n2 = map(int,input().split())
  f.append(n1)
  s.append(n2)
r1=sum(f)/n
r2=sum(s)/n
print(f"{r1:.2f}")
print(f"{r2:.2f}")...........use f string for 2 decimal place condition

10.
Input:
10:00 9:55 10:02 9:45 11:00
Output:
2
Explanation:
The 2 people were those who came at 10:02 and 11:00

CODE:
s=input().split(" ")
thresold=10*60
c=0
for i in s:
   h,m=i.split(":")
   total=int(h)*60+int(m)
   if total > thresold:
      c+=1
print(c)

11.The name and mileage of certain cars is passed as the input. The format is CARNAME@MILEAGE and the input is as a single line, with each car information separated space. 
The program must print the car with the lowest mileage. (Assume no two cars will ha the lowest mileage)
The first line contains the CARNAME@MILEAGE separated by a space.
Input:
Zantro@16.15 Zity@12.5 Gamry@9.8
Output:
Gamry

s=input().split(" ")
l=[]
for i in s:
   name, mileage = i.split("@")
   l.append([name,int(mileage)])
low=min([j for i,j in l])
res=[i for i,j in 1 if j==low] I
print(*res)

12.remove duplicates using mapping
l=[1,4,6,4,2,2,5]
d={}
for i in l:
    if d.get(i,0)==0:
        d[i]=d.get(i,0)+1
res=[i for i,j in d.items()]
print(res)

12....EXTRACT THE VOWELS AND PLACE IT IN REVERSE ORDER
YOGESHWARAN
YAGASHWERON

s=input().lower()
v=[i for i in s if i in "aeiou"]
j=len(v)-1
res=[0]*len(s)
for i in range(len(s)):
    if s[i] in v:
        res[i]=v[j]
        j-=1
    else:
        res[i]=s[i]
print("".join(res))

13.RETURN SUM OF BOTH ARRAY MIDDLE ELEMENT....IF len(arr) is even mid = add the centre two element and divide by 2
def mid_element(arr):
    m=len(arr)//2
    if len(arr)%2==0:
        return (arr[m]+arr[m-1])//2
    else:
        return arr[m]
a=list(map(int,input().split()))
b=list(map(int,input().split()))
a1=sorted(a)
b1=sorted(b)
ma=mid_element(a1)
mb=mid_element(b1)
print(ma+mb)

14.Return the element whose repeated count is odd
l=[1,3,2,3,2,1,4,5,4,6,7,3,2]
d={}
for i in l:
    d[i]=d.get(i,0)+1
res=[i for i,j in d.items() if j>1 and j%2!=0]
print(res)

15.Round the number to nearest multiple of 10
n=int(input())
print(round(n/10)*10)
i/p:38
o/p:40

38/10=3.8 rounded to 4 *10=40

16.Print uppercase lowercase alternatively in sorted order
i/p:SanDhiYa
o/p:DaSaYhin

s=input()
u=sorted([i for i in s if i.isupper()])
l=sorted([i for i in s if i.islower()])
res=[]
j,k=0,0
while j<len(u) and k<len(l):
    res.append(u[j])
    j+=1
    res.append(l[k])
    k+=1
while j<len(u):
    res.append(u[j])
    j+=1
while k<len(l):
    res.append(l[k])
    k+=1
print("".join(res))



