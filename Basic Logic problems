1.SECOND SMALLEST OPTIMISED WITH ALL CONSTRAINTS

import java.util.*;
public class Main {
    static int secondsmallest(int arr[], int n){
        if(n==1 || n==0){
            return -1;.........................>condition 1
        }
        int s = Integer.MAX_VALUE;
        int ss = Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            if(arr[i]<s){
                ss=s;..............always first change s to ss and update i to s
                s = arr[i];
            }
            else if(arr[i]<ss && arr[i]!=s){
                ss=arr[i];
            }
        }
        if(ss==Integer.MAX_VALUE){.......................................>if elements are same [5,5,5] return 5
            return s;
        }
        return ss;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[5];
        for(int i=0;i<5;i++){
            arr[i]=sc.nextInt();
        }
        int n = arr.length;
        System.out.println("secondsmallest:"+secondsmallest(arr,n));
    }
}
PYTHON:
def secsmall(li,n):
    if n<=1:
        return -1
    s=float('inf')
    ss=float('inf')
    for i in li:
        if i<s:
            ss=s
            s=i
        elif i<ss and i!=s:
            ss=i
    if ss==float('inf'):
        return s
    return ss
        
n=int(input())
li=list(map(int,input().split()))
print(secsmall(li,n))

2.SECOND LARGEST
python:
def seclar(li,n):
    if n<=1:
        return -1
    l=float('-inf')
    sl=float('-inf')
    for i in li:
        if i>l:
            sl=l
            l=i
        elif i>sl and i!=l:
            sl=i
    if sl==float('-inf'):
        return l
    return sl
        
n=int(input())
li=list(map(int,input().split()))
print(seclar(li,n))

JAVA:
import java.util.*;
public class Main {
    static int secondlargest(int arr[], int n){
        if(n==1 || n==0){
            return -1;
        }
        int l = Integer.MIN_VALUE;
        int sl = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            if(arr[i]>l){
                sl=l;
                l = arr[i];
            }
            else if(arr[i]>sl && arr[i]!=l){
                sl=arr[i];
            }
        }
        if(sl==Integer.MIN_VALUE){
            return l;
        }
        return sl;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[5];
        for(int i=0;i<5;i++){
            arr[i]=sc.nextInt();
        }
        int n = arr.length;
        System.out.println("secondlargest:"+secondlargest(arr,n));
    }
}
.................................................................................................................................................................................................................

2.Palindrome
def palindrome(s):
    S = s.lower().....................ignorecase
    l=0
    r=len(s)-1
    while l<r:
        if not s[l].isalpha():.................ignore special characters
            l+=1
        elif not s[r].isalpha():
            r-=1
        elif s[l]!=s[r]:
            return False
            break
        else:
            l+=1
            r-=1
    return True
s=input()
print(palindrome(s))

Java:

import java.util.*;
public class Main{
    static boolean palindrome(String s){
        String S = s.toLowerCase();
        int l=0;
        int r=S.length()-1;
        while(l<r){
            if(!Character.isAlphabetic(S.charAt(l))){
                l+=1;
            }
            else if(!Character.isAlphabetic(S.charAt(r))){
                r-=1;
            }
            else if(S.charAt(l)!=S.charAt(r)){
                return false;
            }
            else{
                l+=1;
            r-=1;
            }
        }
        return true;
    }
	public static void main(String[] args) {
	    Scanner sc = new Scanner(System.in);
	    String s = sc.nextLine();
		System.out.println(palindrome(s));
	}
}

3.
1 2 3
4 5 6
7 8 9
O/p 123654789

matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

result = []

for i in range(len(matrix)):
    if i % 2 == 0:
        result.extend(matrix[i])         # Even row: left to right
    else:
        result.extend(matrix[i][::-1])   # Odd row: right to left

print(''.join(str(x) for x in result))  # Output: 123654789

4.FIND MAX GCD

N1=int(input())
N2=int(input())
m=min(N1,N2)
l=[]
for i in range(1,m+1):
   if(N1%i==0 and N2%i==0):
      l.append(i)
print(max(l))

5.remove first and last character...........python string doesn't have any builtin fn to remove charcter..using indexing
s=input()
print(s[1:-1])

6.print odd integers between range
n1=int(input())
n2=int(input())
for i in range(n1+1, n2):
   if i%2!=0:
      print(i,end=" ")

7.print string till character c

s=input()
c=input()
i=s.find(c)
print(s[i])

8.fibonacci sequence
n=input(input())
f=0
s=1
print(f,s,end=" ")
for i in range(2,n):
    t=f+s
    print(t,end=" ")
    f=s
    s=t

9.Example Input/Output 1:
Input:
3
250 200

450 300

200 250

Output:

300.00

250.00

CODE:
n=int(input())
f=[]
s=[]
for i in range(n):
  n1, n2 = map(int,input().split())
  f.append(n1)
  s.append(n2)
r1=sum(f)/n
r2=sum(s)/n
print(f"{r1:.2f}")
print(f"{r2:.2f}")...........use f string for 2 decimal place condition

10.
Input:
10:00 9:55 10:02 9:45 11:00
Output:
2
Explanation:
The 2 people were those who came at 10:02 and 11:00

CODE:
s=input().split(" ")
thresold=10*60
c=0
for i in s:
   h,m=i.split(":")
   total=int(h)*60+int(m)
   if total > thresold:
      c+=1
print(c)

11.The name and mileage of certain cars is passed as the input. The format is CARNAME@MILEAGE and the input is as a single line, with each car information separated space. 
The program must print the car with the lowest mileage. (Assume no two cars will ha the lowest mileage)
The first line contains the CARNAME@MILEAGE separated by a space.
Input:
Zantro@16.15 Zity@12.5 Gamry@9.8
Output:
Gamry

s=input().split(" ")
l=[]
for i in s:
   name, mileage = i.split("@")
   l.append([name,int(mileage)])
low=min([j for i,j in l])
res=[i for i,j in 1 if j==low] I
print(*res)

12.remove duplicates using mapping
l=[1,4,6,4,2,2,5]
d={}
for i in l:
    if d.get(i,0)==0:
        d[i]=d.get(i,0)+1
res=[i for i,j in d.items()]
print(res)

12....EXTRACT THE VOWELS AND PLACE IT IN REVERSE ORDER
YOGESHWARAN
YAGASHWERON

s=input().lower()
v=[i for i in s if i in "aeiou"]
j=len(v)-1
res=[0]*len(s)
for i in range(len(s)):
    if s[i] in v:
        res[i]=v[j]
        j-=1
    else:
        res[i]=s[i]
print("".join(res))

13.RETURN SUM OF BOTH ARRAY MIDDLE ELEMENT....IF len(arr) is even mid = add the centre two element and divide by 2
def mid_element(arr):
    m=len(arr)//2
    if len(arr)%2==0:
        return (arr[m]+arr[m-1])//2
    else:
        return arr[m]
a=list(map(int,input().split()))
b=list(map(int,input().split()))
a1=sorted(a)
b1=sorted(b)
ma=mid_element(a1)
mb=mid_element(b1)
print(ma+mb)

14.Return the element whose repeated count is odd
l=[1,3,2,3,2,1,4,5,4,6,7,3,2]
d={}
for i in l:
    d[i]=d.get(i,0)+1
res=[i for i,j in d.items() if j>1 and j%2!=0]
print(res)

15.Round the number to nearest multiple of 10
n=int(input())
print(round(n/10)*10)
i/p:38
o/p:40

38/10=3.8 rounded to 4 *10=40

16.Print uppercase lowercase alternatively in sorted order
i/p:SanDhiYa
o/p:DaSaYhin

s=input()
u=sorted([i for i in s if i.isupper()])
l=sorted([i for i in s if i.islower()])
res=[]
j,k=0,0
while j<len(u) and k<len(l):
    res.append(u[j])
    j+=1
    res.append(l[k])
    k+=1
while j<len(u):
    res.append(u[j])
    j+=1
while k<len(l):
    res.append(l[k])
    k+=1
print("".join(res))

17.Given the array arr[] of heights of certain buildings that lie adjacent to each other, Sunlight starts falling from the left side of the buildings. If there is a building of a certain height, all the buildings to the right side of it having lesser heights cannot see the sun. The task is to find the total number of buildings that receive sunlight.
Examples:
Input: arr[] = [6, 2, 8, 4, 11, 13]
Output: 4

Explanation: Only buildings of height 6, 8, 11 and 13 can see the sun, hence output is 4.

a=list(map(int,input().split()))
res=[]
res.append(a[0])
for i in range(1,len(a)):
    l=i-1
    if a[l]<a[i]:
        res.append(a[i])
print(len(res))

18.Panagram or not:
1.Number of substrings of one string present in other

s1=input()
s2=input()
c=0
for i in range(len(s1)):
    s=""
    for j in range(i,len(s1)):
        s+=s1[j]
        if s2.find(s)!=-1:
            c+=1
print(c)

Input :s1 = abcd
       s2 = swalencud
Output :3 

2.Print all substring of a number 
s1=int(input())
s2=str(s1)
for i in range(len(s2)):
    s=""
    for j in range(i,len(s2)):
        s+=s2[j]
        print(s)

Input: N = 123 
Output: Possible Substrings: {1, 12, 123, 2, 23, 3}  

3.Find the count of palindromic sub-string of a string in its sorted form

s=input()
s1=sorted(s)
c=[]
for i in range(len(s1)):
    s=""
    for j in range(i,len(s1)):
        s+=s1[j]
        if s==s[::-1]:
            c.append(s)
print(len(c))
print(*sorted(c))

Input: str = "acbbd" 
Output: 6 
All palindromic sub-string in it's sorted form ("abbcd") are "a", "b", "b", "bb", "c" and "d".

4.Substring Reverse Pattern
def revsub(s):
    print(''.join(s))
    i=0
    j=len(s)-1
    while i<j:
        s[i],s[j]=s[j],s[i]
        i+=1
        j-=1
    i,j=0,len(s)-1
    while i<j:
        s[i],s[j]='',''
        print(''.join(s))
        i+=1
        j-=1
s=input()
revsub(list(s))

Input: str = "geeks" 
Output: 
geeks 
kee 
*e* 

5.Check if a string contains a palindromic substring of even length
def palinsub(s1):
    for i in range(len(s1)):
        s = ""
        for j in range(i, len(s1)):
            s += s1[j]
            if s == s[::-1] and len(s) % 2 == 0:
                return "YES"
    return "NO"

s1 = input()
print(palinsub(s1))

Input  : aassss
Output : YES
Input  : gfg
Output : NO

6. Count number of substrings with numeric value greater than X
def count_greater(s1, x):
    c = 0
    for i in range(len(s1)):
        s = ""
        for j in range(i, len(s1)):
            s += s1[j]
            if int(s) > x:
                c += 1
    return c

s = input()
x = int(input())
print(count_greater(s, x))

Input: S = "471", X = 47
Output: 2
Only the sub-strings "471" and "71" 
satisfy the given conditions.

7.Maximum count of sub-strings of length K consisting of same characters
def samechar(s1,k):
    if k>len(s1):...............base condition
        return 0
    d={}
    for i in range(0,len(s1)-k+1,k):.................if substring asked on length k use this
        sub=s1[i:i+k]..........................generate substring like this
        if sub.count(sub[0])==k:.....................check substr of same characters
            d[sub]=d.get(sub,0)+1
    if d:
        return max(d.values())
    else:
        return 0
s1=input()
k=int(input())
print(samechar(s1,k))

Input: str = "aaacaabbaa", k = 2 
Output: 3 

8.Count of sub-strings of length n.............same above model..because length is given
def count_substrings(string, n):
    count = 0
    for i in range(len(string) - n + 1):
        substring = string[i:i+n]
        if len(substring) == n:
            count += 1
    return count

str = "geeksforgeeks"
n = 5
print(count_substrings(str, n))

Input: str = "geeksforgeeks", n = 5 
Output: 9 

9.Find distinct characters in distinct substrings of a string

def count_disubstrings(s):
    l=set()
    c=0
    for i in range(len(s)):
        s1 = ""
        for j in range(i,len(s)):
            s1 += s[j]
            l.add(s1)
    for i in l:
        c+=len(set(i))
    return c

s = input()
print(count_disubstrings(s))

nput: str = "ABCA" 
Output: 18 
 

10.Length of longest substring having all characters as K

def longsub(s,k):
    d={}
    for i in range(len(s)):
        s1 = ""
        for j in range(i,len(s)):
            s1 += s[j]
            if s1.startswith(k) and s1.count(k)==len(s1):
                d[s1]=len(s1)
    return max(d.values())
s = input()
k=input()
print(longsub(s,k))

Input: S = "abcd1111aabc", K = '1' 
Output: 4 
Explanation: 
1111 is the largest substring of length 4.

11.Longest sub string of 0's in a binary string which is repeated K times

def longsub(S,k):
    s=S*k
    d={}
    for i in range(len(s)):
        s1 = ""
        for j in range(i,len(s)):
            s1+=s[j]
            if s1.startswith('0') and s1.count('0')==len(s1):
                d[s1]=s1.count('0')
    return max(d.values())
            
S = input()
k=int(input())
print(longsub(S,k))

nput : S = "100001" , K = 3 
Output : 4 
After repeating given string 3 time, string becomes 100001100001100001. 
The longest substring of 0's is 4 

12.Maximum length palindromic substring such that it starts and ends with given char
def longsub(s,ch):
    d={}
    for i in range(len(s)):
        s1 = ""
        for j in range(i,len(s)):
            s1+=s[j]
            if s1==s1[::-1] and s1.startswith(ch) and s1.endswith(ch):
                d[s1]=len(s1)
    return max(d.values())
            
s = input()
ch=input()
print(longsub(s,ch))

Input: str = "lapqooqpqpl", ch = 'p' 
Output: 6 
"pqooqp" is the maximum length palindromic 
sub-string that starts and ends with 'p'.

13.Count all substrings having character K
def longsub(s,ch):
    c=0
    for i in range(len(s)):
        s1 = ""
        for j in range(i,len(s)):
            s1+=s[j]
            if ch in s1:
                c+=1
    return c
            
s = input()
ch=input()
print(longsub(s,ch))


Input: str = "geeks", K = 'g' 
Output: 5 
"g", "ge", "gee", "geek" and "geeks" are the valid substrings.
Input: str = "geeksforgeeks", K = 'k' 
Output: 56 

14.Reverse the given string in the range [L, R]

def rev(s,l,r):
    return s[:l]+s[l:r+1][::-1]+s[r+1:]
            
s = input()
l=int(input())
r=int(input())
print(rev(s,l,r))

nput: str = "geeksforgeeks", L = 5, R = 7 
Output: geeksrofgeeks 

15.Number of substrings that start with "geeks" and end with "for"
def count(s):
    c=0
    for i in range(len(s)):
        s1 = ""
        for j in range(i,len(s)):
            s1+=s[j]
            if s1.startswith('geeks') and s1.endswith('for'):
                c+=1
    return c      
s = input()
print(count(s))

Input: str = "geeksforgeeksisforgeeks" 
Output: 3 
"geeksfor", "geeksforgeeksisfor" and "geeksisfor" 
are the only valid substrings.

